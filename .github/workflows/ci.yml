name: CI - Lint and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Pylint Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run Pylint on core modules (informational)
        run: |
          echo "=== Linting Core Modules ==="
          pylint app.py models.py config.py celery_app.py --exit-zero || true
          pylint api/ projects/ tasks/ auth/ ai/ --exit-zero || true
          pylint notifications_routes.py notifications_models.py notifications_service.py --exit-zero || true
          pylint automation/ --exit-zero || true
        continue-on-error: true
      
      - name: Run Pylint with quality gate (must pass)
        run: |
          echo "=== Enforcing Quality Gate: Pylint Score >= 9.0/10 ==="
          pylint app.py models.py --fail-under=9.0
          pylint api/ --fail-under=9.0 --recursive=y
          pylint auth/ --fail-under=9.0 --recursive=y
        continue-on-error: false

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-flask
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run pytest with coverage
        run: |
          echo "=== Running Tests with Coverage ===" 
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=90
        continue-on-error: false
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: Archive coverage HTML report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-html-report
          path: htmlcov/

  security:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install safety
        run: pip install safety
      
      - name: Check for security vulnerabilities
        run: |
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt --exit-zero || true
          fi
        continue-on-error: true
